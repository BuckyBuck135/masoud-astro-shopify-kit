---
import BaseLayout from "@layouts/BaseLayout.astro";
import ProductModal from "@components/shopify/ProductModal.astro";
import CTA from "@components/CTA.astro";
import FAQ from "@components/FAQ.astro";

// Optimize our landing image and pass it as props to the BaseLayout (for preloading) and Landing (for rendering)
import landingImage from "@assets/images/landing.jpg"; // <-- THE PATH TO THE ASSET YOU WANT TO PRELOAD - The asset must live in src
import { getImage } from "astro:assets";
import ShopifyAddToCartBtn from "@components/shopify/ShopifyAddToCartBtn.astro";
import ViewProductBtn from "@components/shopify/ViewProductBtn.astro";
const optimizedImage = await getImage({ src: landingImage, format: "avif" });
---

<BaseLayout
  title="Pixel Perfect Websites"
  description="Meta description for the page"
  preloadedImage={optimizedImage}
>
  <section id="collection-1602">
    <div class="cs-container">
      <div class="cs-listing">
        <shopify-list-context type="product" query="products" first="12">
          <!-- This template is repeated for each product in the collection -->
          <template>
            <article
              class="cs-item"
              shopify-attr--disabled="!product.availableForSale"
            >
              <a
                shopify-attr--disabled="!product.availableForSale"
                onclick="getElementById('product-modal').showModal(); getElementById('product-modal-context').update(event);"
                class="cs-link"
              >
                <div class="cs-picture">
                  <shopify-media
                    max-images="1"
                    width="280"
                    height="280"
                    query="product.selectedOrFirstAvailableVariant.image"
                  ></shopify-media>
                  <span class="cs-offer">ON SALE</span>
                </div>
                <div class="cs-details">
                  <h3 class="cs-name">
                    <shopify-data query="product.title"></shopify-data>
                  </h3>
                  <div class="cs-actions">
                    <div class="cs-flex">
                      <span class="cs-price"
                        ><shopify-money
                          query="product.selectedOrFirstAvailableVariant.price"
                        ></shopify-money></span
                      >
                      <span class="cs-was-price">
                        <shopify-money
                          query="product.selectedOrFirstAvailableVariant.compareAtPrice"
                        ></shopify-money>
                      </span>
                    </div>
                  </div>
                </div>
              </a>

              <!-- <ShopifyAddToCartBtn /> -->
              <ViewProductBtn />
            </article>
          </template>
        </shopify-list-context>
      </div>
      <!-- YOU CAN REMOVE PRODUCT MODAL IF YOU WANT TO HAVE THE VIEW PRODUCT BUTTON AND SPECIFIC PAGES FOR EACH PRODUCT -->
      <ProductModal />
    </div>
  </section>
  <FAQ />
  <CTA />
</BaseLayout>

<script is:inline>
  function updateOffers() {
    document.querySelectorAll(".cs-was-price").forEach((price) => {
      const offer = price.closest(".cs-item")?.querySelector(".cs-offer");
      if (!offer) return;

      if (price.textContent.trim() !== "") {
        offer.style.display = "block";
      } else {
        offer.style.display = "none";
      }
    });
  }

  document.addEventListener("astro:page-load", () => {
    updateOffers();

    // Watch for Shopify web components changing
    const observer = new MutationObserver(updateOffers);
    observer.observe(document.body, {
      childList: true,
      subtree: true,
      characterData: true,
    });
  });
</script>

<style lang="less">
  /*-- -------------------------- -->
<---        Collection          -->
<--- -------------------------- -*/

  /* Mobile - 360px */
  @media only screen and (min-width: 0rem) {
    #collection-1602 {
      padding: var(--sectionPadding);

      .cs-container {
        width: 100%;
        max-width: (1280/16rem);
        margin: auto;
        display: flex;
        flex-direction: column;
        align-items: center;
        /* 48px - 64px */
        gap: clamp(3rem, 6vw, 4rem);
        position: relative;
        z-index: 1;
      }

      .cs-content {
        text-align: center;
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: (24/16rem);
      }

      .cs-title {
        margin: 0;
      }

      .cs-button-group {
        margin: 0;
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        /* 16px - 32px */
        gap: clamp(1rem, 4vw, 2rem);
      }

      .cs-button {
        font-size: (16/16rem);
        font-weight: 700;
        line-height: 1.2em;
        text-transform: uppercase;
        padding: 0;
        color: var(--bodyTextColor);
        background-color: transparent;
        border: none;
        position: relative;
        transition: color 0.3s;

        &:before {
          content: "";
          width: 0;
          height: 1px;
          background: var(--primary);
          display: block;
          position: absolute;
          bottom: 0;
          left: 0;
          transition: width 0.3s;
        }

        &:hover {
          color: var(--primary);
          cursor: pointer;

          &:before {
            width: 100%;
          }
        }

        &.cs-active {
          color: var(--primary);

          &:before {
            width: 100%;
          }
        }
      }

      .cs-listing-wrapper {
        width: 100%;
        position: relative;
        z-index: 1;
      }

      .cs-listing {
        width: 100%;
        margin: 0;
        padding: 0;
        display: grid;
        justify-items: center;
        grid-auto-flow: row;
        /* 16px - 20px */
        gap: clamp(1rem, 1.5vw, 1.25rem);
        position: relative;
        transform-style: preserve-3d;
        perspective: 700px;
        transition:
          transform 0.7s,
          opacity 0.3s,
          visibility 0.5s,
          top 0.3s,
          left 0.3s;
        /* makes the transform scaling origin the top left corner, dictates the direction by which the scale transforms animate towards */
        transform-origin: left top;

        &.cs-hidden {
          /* hidden galleries have a 0 opacity, and we animate the opacity to 1 when they become active */
          opacity: 0;
          /* by using visibility:hidden instead of display:none, we can see the animations from the opacity and transforms, display:none won't render animations. */
          visibility: hidden;
          position: absolute;
          position: absolute;
          /* this top and left value help control the animation, by setting it to position absolute and left 0, the gallery won't fly off screen to the left, it will stop its position to be at the left edge of the .cs-container (left: 0). Same for the top:0 value, the gallery won't go past that position when it animates */
          top: 0;
          left: 0;
          /* prevents the hidden galleries from overflowing the section, and makes a nice animations to transition to and from */
          transform: scaleY(0) scaleX(0);
          /* prevents the mouse from interacting with it */
          pointer-events: none;

          .cs-image {
            opacity: 0;
            /* when gallery is hidden, add these styles to the cs-image to animate from when cs-hidden is removed from the .cs-gallery */
            transform: translateY(2.1875rem) rotateX(90deg);
          }

          .cs-item {
            transform: rotateY(180deg);
            opacity: 0;
          }
        }
      }

      .cs-item {
        width: 100%;
        max-width: (320/16rem);
        /* overwrites the default 'min-width: auto' value, keeping all grid items the same width no matter what*/
        min-width: 0;
        opacity: 1;
        padding: (16/16rem);
        border: 1px solid #e8e8e8;
        transform: rotateY(0);
        transition:
          transform 0.7s,
          opacity 0.3s;

        &:nth-of-type(1) {
          transition-delay: 0.1s;
        }
        &:nth-of-type(2) {
          transition-delay: 0.2s;
        }
        &:nth-of-type(3) {
          transition-delay: 0.3s;
        }
        &:nth-of-type(4) {
          transition-delay: 0.4s;
        }
        &:nth-of-type(5) {
          transition-delay: 0.5s;
        }
        &:nth-of-type(6) {
          transition-delay: 0.6s;
        }
        &:nth-of-type(7) {
          transition-delay: 0.7s;
        }
        &:nth-of-type(8) {
          transition-delay: 0.8s;
        }
        &:nth-of-type(9) {
          transition-delay: 0.1s;
        }
        &:nth-of-type(10) {
          transition-delay: 0.1s;
        }
        &:nth-of-type(11) {
          transition-delay: 0.1s;
        }
        &:nth-of-type(12) {
          transition-delay: 0.1s;
        }
      }

      .cs-item:is([disabled]) {
        cursor: not-allowed;
        position: relative;
      }
      .cs-item:is([disabled])::before {
        background-color: rgba(255, 255, 255, 0.5);
        content: "";
        height: 100%;
        left: 0;
        position: absolute;
        top: 0;
        width: 100%;
        z-index: 1;
      }
      .cs-item:is([disabled])::after {
        content: "Sold out";
        position: absolute;
        top: 40%;
        left: 0;
        width: 100%;
        height: 100%;
        color: #000000;
        font-size: 1.125rem;
        font-weight: 700;
        text-align: center;
        z-index: 2;
      }

      .cs-link {
        text-decoration: none;

        &:hover {
          img {
            transform: scale(1.1);
          }
        }
      }

      .cs-picture {
        margin-bottom: (20/16rem);
        position: relative;
      }

      .cs-offer {
        display: none;
        font-size: (13/16rem);
        font-weight: 700;
        line-height: 1.2em;
        text-transform: uppercase;
        letter-spacing: 1.3px;
        padding: (6/16rem);
        color: #fff;
        background: #ff4747;
        position: absolute;
        top: (12/16rem);
        right: (12/16rem);
      }

      .cs-category {
        font-size: (16/16rem);
        line-height: 1.5em;
        color: #767676;
      }

      .cs-name {
        /* 20px - 25px */
        font-size: clamp(1.25rem, 1vw, 1.5625rem);
        font-weight: 700;
        line-height: 1.2em;
        text-overflow: ellipsis;
        white-space: nowrap;
        width: 100%;
        margin: 0;
        color: var(--headerColor);
        overflow: hidden;
      }

      .cs-actions {
        margin-top: (20/16rem);
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .cs-price {
        font-size: (20/16rem);
        font-weight: 700;
        line-height: 1.2em;
        color: var(--secondary);
      }

      .cs-was-price {
        font-size: (16/16rem);
        font-weight: 700;
        line-height: 1.2em;
        text-decoration: line-through;
        color: #767676;
      }

      .cs-stars {
        margin-top: (4/16rem);
        display: flex;
      }

      .cs-star {
        width: (20/16rem);
        height: (20/16rem);
      }

      .cs-buy {
        max-height: (40/16rem);
        padding: (8/16rem);
        background: none;
        border: 2px solid var(--primary);
        border-radius: (4/16rem);
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .cs-basket {
        width: (24/16rem);
        height: auto;
      }
    }
  }

  /* Tablet - 768px */
  @media only screen and (min-width: 48rem) {
    #collection-1602 {
      .cs-content {
        flex-direction: row;
        justify-content: space-between;
      }

      .cs-listing {
        grid-template-columns: repeat(3, 1fr);
      }
    }
  }

  /* Dark Mode */
  @media only screen and (min-width: 0rem) {
    body.dark-mode {
      #collection-1602 {
        .cs-title,
        .cs-button,
        .cs-category,
        .cs-was-price,
        .cs-price,
        .cs-name {
          color: var(--bodyTextColorWhite);
        }

        .cs-active {
          color: var(--primary);
        }

        .cs-category,
        .cs-was-price {
          opacity: 0.8;
        }

        .cs-item {
          background-color: var(--medium);
          border-color: var(--accent);
        }
      }
    }
  }
</style>
