<!-- It's a bit dirty and hacky but it works. we grab the product handle, then set that span to hidden, and update the parent anchor element href with that product handle. we use his to dynamically creating pages for each product -->
<a href="" class="product-link-btn cs-button-solid">
  <span class="product-handle" aria-hidden="true">
    <shopify-data class="hidden" query="product.handle"></shopify-data>
  </span>
  View Product
</a>

<script is:inline>
  function updateLinks() {
    const viewProductBtns = document.querySelectorAll(".product-link-btn");

    viewProductBtns.forEach((btn) => {
      const data =
        btn.querySelector("shopify-data") ||
        btn.querySelector(".product-handle shopify-data");
      if (!data) return;

      const hrefValue = data.textContent.trim();
      if (!hrefValue) return;

      const handleSpan =
        btn.querySelector(".product-handle") || btn.children[0];
      if (handleSpan) handleSpan.style.display = "none";

      btn.href = hrefValue;

      const productLink = btn
        .closest(".cs-item")
        ?.querySelector(".product-link");
      if (productLink) productLink.href = hrefValue;
    });
  }

  updateLinks();

  new MutationObserver(updateLinks).observe(document.body, {
    childList: true,
    subtree: true,
  });
</script>

<style>
  .cs-button-solid {
    margin-top: 1rem;
    border: none;
    width: 100%;
  }
</style>
